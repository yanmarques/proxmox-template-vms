#!/bin/sh
set -e

# global vars
templated_dev=/dev/sda

# only executes when we are on the client
if [ ! -b "$templated_dev" ]; then
	exit 0
fi

if [ $# -ne 1 ]; then
	echo "Usage: $0 USER"
	exit 1
fi	

# input argument
user="$1"

# configures default files on client disk
setup_vm_disk() {
	# create user home directory
	mkdir -p /rw/home
	cp -r /etc/skel/ /rw/home/"$user"	
	chown -R "$user":"$user" /rw/home/"$user"

	# maybe restore SELinux security context
	if command -v restorecon > /dev/null 2>&1; then
		restorecon -R /rw/home
	fi

	# configuration files
	# gives user full control over the installation
	mkdir -p /rw/config
	mkdir -p /rw/binds

	if [ ! -f /rw/config/rc.local ]; then
		cat <<EOF > /rw/config/rc.local
#!/bin/bash
# Put commands to execute with systemd service.
# Eg.: systemctl start openvpn-client
EOF
	fi
}

# given a root directory, mount every file to the root filesystem
#
# imagine the following file structure:
# /rw/binds
# └── etc
#     └── wireguard
#         └── wg0.conf
#
# now, the file /rw/binds/etc/wireguard/wg0.conf would be
# mounted at /etc/wireguard/wg0.conf
# 
bind_files() {
	for file in "$(ls $1)"; do
		# avoid an infinite loop
		if [ -z "$file" ]; then
			break
		fi

		local path="${1%/}/$file"
		if [ -d "$path" ]; then
		       bind_files "$path"
	    else
			local target_file="${path#/rw/binds}"

			# ensure it is an absolute path to the filesystem
			target_file="/${target_file#/}"

			# ensure directory exists
			mkdir -p "$(dirname $target_file)"

			# then copy it
			cp -p "$path" "$target_file"
		fi    
	done
}

# execute this at startup
handle_user_config() {
	bind_files /rw/binds
	bash /rw/config/rc.local
}

# is the block device already formatted?
# no, so format it and configure it's contents
if ! blkid "$templated_dev" > /dev/null; then
	echo 'type=83' | sfdisk "$templated_dev"
	mkfs.ext4 "$templated_dev"1
	mkdir -p /rw/
	mount "$templated_dev"1 /rw/
	setup_vm_disk
else
	mkdir -p /rw/
	mount "$templated_dev"1 /rw/
fi

mount --bind /rw/home/ /home/
handle_user_config
