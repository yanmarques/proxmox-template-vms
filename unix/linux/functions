#!/bin/bash

list_scsi_disks() {
	lsblk --output PATH --scsi | sed 1d
}

list_all_disks() {
	# --exclude 252 (SWAP)
	lsblk --output TYPE,PATH --exclude 252 | \
		grep '^disk' | awk '{print $2}'
}

is_raw_disk() {
	local disk
	disk="${1:?}"

    blkid -p "$disk" > /dev/null
    [ "$?" -eq 2 ]
}

format_linux_disk() {
	# create MBR partition table and one partition with the whole disk
	# of the type 83 in hexcode, which means Linux type
	echo 'type=83' | sfdisk "$1" > /dev/null
}

make_silent_ext4_fs() {
	mkfs.ext4 "$@" > /dev/null
}

format_disk_when_raw() {
	local block_dev block_dev_partition
	block_dev="${1:?}"
	block_dev_partition="${2:?}"

	# allow all other arguments be passed to mkfs.ext4
	shift
	shift

	# is the block device already formatted?
	# no, so format it and configure it's contents
	if ! is_raw_disk "$block_dev"; then
		return 0
	fi

	# shellcheck disable=SC2154
	exec_log "format block device" format_linux_disk "$block_dev" || \
		return "$format_disk_err"

	# create an ext4 file system on the created partition
	# shellcheck disable=SC2154
	exec_log "create fs on partition" \
		make_silent_ext4_fs "$@" "$block_dev_partition" || \
		return "$file_system_err"
}

start_disk() {
	local block_dev block_dev_partition format_opts mount_opts

	# block device path
	block_dev="${1:?}"
	shift
	
	# default path to disk partition
	block_dev_partition="$block_dev"

	while [[ "$1" == -* ]]; do
		case "$1" in
			-B)
				block_dev_partition="$2"
				;;
			--format-opts)
				format_opts="$2"
				;;
			--mount-opts)
				mount_opts="$2"
				;;
			*) ;;
		esac

		shift
		shift
	done
	
	# shellcheck disable=2086
	format_disk_when_raw "$block_dev" \
		"$block_dev_partition" ${format_opts} || return

	# ensure mountpoiunt exists then mount
	# shellcheck disable=SC2154
	mkdir -p "$rw_dir"

	# mount device disk on rw directory
	# shellcheck disable=2086
	# shellcheck disable=SC2154
	exec_log "mount device" \
		mount ${mount_opts} "$block_dev_partition" "$rw_dir" || \
		return "$mount_err"
}

uninstalled_partitions() {
	for uuid in $(blkid -o export | grep '^UUID' | awk -F= '{print $2}'); do

		# keep the ones which are not in fstab
		if ! grep "$uuid" /etc/fstab > /dev/null; then
			echo "$uuid"
		fi
	done
}

start_disk_from_partition() {
	local device uuid ptuuid dev_part
	uuid="${1:?}"

	# ensure uuid is valid just getting the device path 
	dev_part="$(blkid --uuid="$uuid")"
	if [ "$?" -eq 2 ]; then
		err "no such device: $uuid"
		return 2
	fi

	# extract ptuuid from uuid
	ptuuid="$(lsblk --output UUID,PTUUID | grep "^$uuid" | awk '{print $2}')"

	# extract the first device path from ptuuid
	device="$(lsblk --output PTUUID,PATH | grep -m 1 "^$ptuuid" | awk '{print $2}')"

	start_disk "$device" -B "$dev_part" "$@"
}

find_device_by_uuid() {
	local uuid
	uuid="${1:?}"

	lsblk --output UUID,PATH | grep "^$uuid" | awk '{print $2}'
}

detect_partition() {
	uninstalled_partitions
}

detect_raw_disk() {
	for disk in $(list_all_disks); do
		is_raw_disk "$disk" && echo "$disk"
	done
}

post_home_dir_populated() {
	# maybe restore SELinux security context
	if command -v restorecon > /dev/null 2>&1; then
		# shellcheck disable=SC2154
		restorecon -R "$(rw_base_home)"
	fi
}

mount_strategy() {
	local src target args mnt_opts

	src="${1:?}"
	target="${2:?}"
	args="$3"
	mnt_opts=

	# is not a block device, so will
	# bind mount it
	#
	# if receives a "--force-disk" argument
	# then unconditionally consider source as a disk
	if [ ! -b "$src" ] && [ ! "$args" == "--force-disk" ]; then
		mnt_opts="--bind"
	
		# mount point is not present
		if [ ! -e "$target" ]; then
			# ensure target's root directory exists
			mkdir -p "$(dirname "$target")"

			# is it a file
			if [ -f "$src" ]; then
				touch "$target"

			# is it a directory
			elif [ -d "$src" ]; then
				mkdir -p "$target"

			# alert user and hope for the best
			else
				err "target mountpoint seems to be invalid"
			fi
		fi
	fi

	mount ${mnt_opts} "$src" "$target"
}
