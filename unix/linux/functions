#!/bin/bash

#################################################
# Environment vars
#################################################

linux_dev="${TEMPLATED_DEV:-/dev/sda}"

disks_counter() {
	fdisk -l | grep -c -E 'Disk /dev/(sd|hd)[a-z]{1}'
}

is_raw_disk() {
    blkid -p "$1" > /dev/null
    [ "$?" -eq 2 ]
}

format_linux_disk() {
	# create MBR partition table and one partition with the whole disk
	# of the type 83 in hexcode, which means Linux type
	echo 'type=83' | sfdisk "$1" > /dev/null
}

make_silent_ext4_fs() {
	mkfs.ext4 "$@" > /dev/null
}

format_disk_when_raw() {
	local block_dev block_dev_partition
	block_dev="$1"
	block_dev_partition="$2"

	# allow all other arguments be passed to mkfs.ext4
	shift
	shift

	# is the block device already formatted?
	# no, so format it and configure it's contents
	if is_raw_disk "$block_dev"; then
		if ! exec_log "format block device" \
			format_linux_disk "$block_dev"; then

			# shellcheck disable=SC2154
			return "$format_disk_err"
		fi

		# create an ext4 file system on the created partition
		if ! exec_log "create fs on partition" \
			make_silent_ext4_fs "$@" "$block_dev_partition"; then

			# shellcheck disable=SC2154
			return "$file_system_err"
		fi
	fi
}

start_disk() {
	local block_dev block_dev_partition format_opts mount_opts

	# block device path
	block_dev="$1"
	shift
	
	# default path to disk partition
	block_dev_partition="$block_dev"1

	while [[ "$1" == -* ]]; do
		case "$1" in
			-B)
				block_dev_partition="$2"
				;;
			--format-opts)
				format_opts="$2"
				;;
			--mount-opts)
				mount_opts="$2"
				;;
			*) ;;
		esac

		shift
		shift
	done
	
	# shellcheck disable=2086
	if ! format_disk_when_raw "$block_dev" \
		"$block_dev_partition" ${format_opts}; then

		return "$?"
	fi

	# ensure mountpoiunt exists then mount
	# shellcheck disable=SC2154
	mkdir -p "$rw_dir"

	# mount device disk on rw directory
	# shellcheck disable=2086
	if ! exec_log "mount device" \
		mount ${mount_opts} "$block_dev_partition" "$rw_dir"; then

		# shellcheck disable=SC2154
		return "$mount_err"
	fi
}

main() {
	on_template_or_out $(disks_counter)

	start_disk "$linux_dev"

	if ! exec_log "disk setup" setup_vm_disk /bin/bash; then
		exit 8
	fi

	# make a transparent bind for user's home
	mount --bind "$(rw_base_home)" "$base_home_dir"
}

entrypoint() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 USER"
        return 1
    fi

    templated_exec main "$1"
}