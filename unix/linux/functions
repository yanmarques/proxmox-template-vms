#!/bin/bash

linux_dev="${TEMPLATED_DEV:-/dev/sda}"

disks_counter() {
	fdisk -l | egrep 'Disk /dev/(sd|hd)[a-z]{1}' | wc -l
}

is_raw_disk() {
    blkid -p "$1" > /dev/null
    [ "$?" -eq 2 ]
}

format_linux_disk() {
	echo 'type=83' | sfdisk "$1" > /dev/null
}

make_silent_ext4_fs() {
	mkfs.ext4 "$@" > /dev/null
}

format_disk_when_raw() {
	local block_dev block_dev_partition
	block_dev="$1"
	block_dev_partition="$2"

	# allow all other arguments be passed to mkfs.ext4
	shift
	shift

	# is the block device already formatted?
	# no, so format it and configure it's contents
	if is_raw_disk "$block_dev"; then
		# create MBR partition table and one partition with the whole disk
		# of the type 83 in hexcode, which means Linux type
		if ! exec_log "format block device" \
			format_linux_disk "$block_dev"; then
			exit 5
		fi

		# create an ext4 file system on the created partition
		if ! exec_log "create fs on partition" \
			make_silent_ext4_fs "$@" "$block_dev_partition"; then
			exit 6
		fi

		return 0
	fi

	return 1
}

start_disk() {
	# block device path
	local block_dev="$1"

	# path to disk partition
	local block_dev_partition="$block_dev"1

	format_disk_when_raw "$block_dev" "$block_dev_partition"

	# ensure mountpoiunt exists then mount
	mkdir -p "$rw_dir"

	# mount device disk on rw directory
	if ! exec_log "mount device" mount "$block_dev_partition" "$rw_dir"; then
		exit 7
	fi
}

main() {
	on_template_or_out $(disks_counter)

	start_disk "$linux_dev"

	if ! exec_log "disk setup" setup_vm_disk /bin/bash; then
		exit 8
	fi

	# make a transparent bind for user's home
	mount --bind "$(rw_base_home)" "$base_home_dir"
}

entrypoint() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 USER"
        exit 1
    fi

    templated_exec main "$1"
}