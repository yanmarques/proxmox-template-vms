#!/bin/bash

linux_dev="${TEMPLATED_DEV:-/dev/sda}"

# mocking functions
make_fs=${TEMPLATED_MOCK_MKFS:-mkfs.ext4}
mount_fs=${TEMPLATED_MOCK_MOUNT:-mount}

disks_counter() {
	fdisk -l | egrep 'Disk /dev/(sd|hd)[a-z]{1}' | wc -l
}

# create MBR partition table and one partition with the whole disk
# of the type 83 in hexcode, which means Linux type  
format_disk() {
	local block_dev="$1"
	echo 'type=83' | sfdisk "$block_dev" > /dev/null
}

create_fs() {
	local block_dev_partition="$1"
	$make_fs "$block_dev_partition" > /dev/null
}

start_disk() {
	# block device path
	local block_dev="$1"

	# path to disk partition
	local block_dev_partition="$block_dev"1

	# is the block device already formatted?
	# no, so format it and configure it's contents
	if ! blkid "$block_dev" > /dev/null; then
		local fmt_title="format block device"
		if ! exec_log "$fmt_title"  format_disk "$block_dev"; then
			exit 5
		fi

		# create an ext4 file system on the created partition
		local mkfs_title="create fs on partition"
		if ! exec_log "$mkfs_title" create_fs "$block_dev_partition"; then
			exit 6
		fi
	fi

	# ensure mountpoiunt exists then mount
	mkdir -p "$rw_dir"
	
	# mount device disk on rw directory
	if ! exec_log "mount device" $mount_fs "$block_dev_partition" "$rw_dir"; then
		exit 7
	fi

	if ! exec_log "disk setup" setup_vm_disk /bin/bash; then
		exit 8
	fi
}

main() {
	on_template_or_out $(disks_counter)

	start_disk "$linux_dev"

	# make a transparent bind for user's home
	mount --bind "$rw_dir"/home/ /home/
}

entrypoint() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 USER"
        exit 1
    fi

    templated_exec main "$1"
}