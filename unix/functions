#!/bin/sh

# global vars
openbsd_dev="${TEMPLATE_OPENBSD_DEV:-sd0}"
linux_dev="${TEMPLATE_LINUX_DEV:-sda}"

openbsd_disks_count() {
	sysctl hw.disknames | tr ',' '\n' | egrep '(sd|wd)[0-9]{1}\:' | wc -l
}

linux_disks_count() {
	fdisk -l | egrep 'Disk /dev/(sd|hd)[a-z]{1}' | wc -l
}

linux_start_disk() {
	local device="$1"
	local user="$2"

	# block device path
	local block_dev=/dev/"$device"

	# path to disk partition
	local block_dev_partition="$block_dev"1

	# is the block device already formatted?
	# no, so format it and configure it's contents
	if ! blkid "$block_dev" > /dev/null; then
		# create MBR partition table and one partition with the whole disk
		# of the type 83 in hexcode, which means Linux type  
		echo 'type=83' | sfdisk "$block_dev"

		# create an ext4 file system on the created partition
		mkfs.ext4 "$block_dev_partition"
	fi

	# ensure mountpoiunt exists then mount
	mkdir -p /rw/
	mount "$block_dev_partition" /rw/

	setup_vm_disk /bin/bash "$user"
}

openbsd_start_disk() {
	# represents an empty disk uid
	local empty_duid="0000000000000000"

	local device="$1"
	local user="$2"
	
	# whole disk
	local char_dev_disk=/dev/r"$device"c

	# root partition
	local char_dev_root=/dev/r"$device"a
	
	# block device
	local block_dev_root=/dev/"$device"a

	# grab device uid
	local duid="$(disklabel $device | grep duid | awk -F: '{print $2}' | tr -d ' ')"

	# deduce whether disk needs a partition table initialization
	if [ "$duid" == "$empty_duid" ]; then
		# create fdisk partition and MBR partition table
		fdisk -iy "$char_dev_disk"

		# create partition
		disklabel -Aw "$char_dev_disk"
		
		# create file system
		newfs "$char_dev_root"
	fi

	# ensure mountpoint exists and mount
	mkdir -p /rw/
	mount "$block_dev_root" /rw/

	setup_vm_disk /bin/ksh "$user"
}

openbsd_main() {
	local user="$1"

	# configure disk and mountpoints
	openbsd_start_disk "$openbsd_dev" "$user"

	# is home mounted then umount
	if df -P | grep /home; then
		umount /home/
	else
		# make a backup of /home
		cp -r /home/ /home.old

		# remove everything inside /home, just to be sure
		rm -rf /home/*
	fi
	
	# bind user home
	ln -s /rw/home/* /home/
}

linux_main() {
	local user="$1"

	linux_start_disk "$linux_dev" "$user"

	# make a transparent bind for user's home
	mount --bind /rw/home/ /home/
}

# configures default files on client disk
setup_vm_disk() {
	local binary="$1"
	local user="$2"

	# create user home directory
	if [ ! -d /rw/home/ ]; then
		mkdir -p /rw/home/
		cp -r /etc/skel/ /rw/home/"$user"	
		chown -R "$user":"$user" /rw/home/"$user"

		# maybe restore SELinux security context
		if command -v restorecon > /dev/null 2>&1; then
			restorecon -R /rw/home/
		fi
	fi

	# configuration files
	# gives user full control over the installation
	mkdir -p /rw/config/
	mkdir -p /rw/binds/

	if [ ! -f /rw/config/rc.local ]; then
		cat <<EOF > /rw/config/rc.local
#!$binary
# Put commands to execute with systemd service.
# Eg.: systemctl start openvpn-client
EOF
		chmod 755 /rw/config/rc.local
	fi

	if [ ! -f /rw/config/bind-dirs.manifest ]; then
		touch /rw/config/bind-dirs.manifest
		chmod 644 /rw/config/bind-dirs.manifest
	fi
}

# try to resolve a path to it's real path
# 
# it may not be able to deliver when the link 
# level is too high. in order to address this problem, 
# one may specify as second argument the maximum depth 
maybe_resolve_symlink_path() {
	local path max_depth symlink_level_counter real_path

	path="$1"
	max_depth="${2:-15}"
	symlink_level_counter="0"

	while [ -h "$path" ] && [ "$symlink_level_counter" -lt "$max_depth" ]; do
		real_path="$(realpath "$path")"
		path="$real_path"
		symlink_level_counter="$(( symlink_level_counter + 1 ))"
	done

	echo "$path"
}

is_directory_bind() {
	local sufix_transform="/${1#/}"
	local sufix_and_prefix="${sufix_transform%/}/"

	grep -e "^$sufix_transform$" -e "^$sufix_and_prefix$" \
		/rw/config/bind-dirs.manifest > /dev/null 2>&1
}

# given a root directory, mount every file to the root filesystem
#
# imagine the following file structure:
# /rw/binds
# └── etc
#     └── wireguard
#         └── wg0.conf
#
# now, the file /rw/binds/etc/wireguard/wg0.conf would be
# mounted at /etc/wireguard/wg0.conf
# 
bind_files() {
	for file in $(ls "$1"); do
		# avoid an infinite loop
		if [ -z "$file" ]; then
			break
		fi

		local path="${1%/}/$file"
		local should_bind=true
		
		if [ -d "$path" ]; then
			local fake_path="${path#/rw/binds}"
			
			if is_directory_bind "$fake_path"; then
				# will ignore this current file		
				should_bind=false

				# recursive function call when path is a directory
				# and is not registered as a bind
		    	bind_files "$path"
			fi
		fi

		$should_bind && local_bind_file_object "$path"
	done
}

local_bind_file_object() {
	local path="$1"

	# try to find the real path
	real_path="$(maybe_resolve_symlink_path "$path")"
	
	# is it still a symlink? skip
	if [ -h "$real_path" ]; then
		echo "[-] $0: symbolic link is too depth: $path"
		continue
	fi

	# find the target path to file
	local target_file="${real_path#/rw/binds}"

	# ensure it is an absolute path to the filesystem
	target_file="/${target_file#/}"

	# ensure directory exists
	mkdir -p "$(dirname $target_file)"

	# backup existing content and ensure target_file
	# is not present
	if [ -e "$target_file" ]; then
		mv --force "$target_file" "${target_file%/}.old"
	fi

	# create a symbolic link
	ln -s "$real_path" "$target_file"
}

# execute this at startup
handle_user_config() {
	bind_files /rw/binds
	/rw/config/rc.local
}

main() {
	local disks_counter main_fn user	

	# input argument
	user="$1"

	case "$(uname)" in
		OpenBSD)
			disks_counter=openbsd_disks_count
			main_fn=openbsd_main

			;;
		*)
			disks_counter=linux_disks_count
			main_fn=linux_main
			
			;;
	esac

	if [ "$($disks_counter)" -lt 2 ]; then
		echo "[-] seems like the template vm here, aborting..."
		exit 0
	fi

	# call arbitrary main function
	$main_fn "$user"

	# apply user custom configuration
	handle_user_config
}
