#!/bin/sh

# shellcheck shell=ksh

# set handy env vars 

# send logs to console
# shellcheck disable=SC2034
TEMPLATED_LOG_FILE=/dev/null

# shellcheck disable=SC1091
. ./unix/functions
. ./unix/console
. ./tests/unix/helpers

unset test_disk test_home

# global user
user="test"

# init array with created temporary directories
temp_dirs=()

# set rw directory as temporary
new_rw_dir() {
    register_tmp_dir
    rw_dir="$(last_tmp_dir)"
}

# set skeleton directory as temporary
new_skel_dir() {
    register_tmp_dir
    skel_dir="$(last_tmp_dir)"
}

register_tmp_dir() {
    local directory
    directory=$(mktemp --directory)

    temp_dirs+=( "$directory" )
}

last_tmp_dir() {
    echo "${temp_dirs[-1]}"
}

create_dummy_disk() {
    test_disk=$(mktemp)
    dd if=/dev/zero of="$test_disk" bs=1M count=10 2> /dev/null
}

create_new_user_base_home() {
    register_tmp_dir
    base_home_dir="$(last_tmp_dir)"
}

setup() {
    # call some default functions
    new_rw_dir
    new_skel_dir
    create_dummy_disk
}

ensure_user_test_exists() {
    create_new_user_base_home

    {
        # create user in system
        if ! exec_log "create test user" useradd -M "$user"; then
            if ! exec_log "deleting already present test user" \
                userdel "$user"; then

                exit 1
            fi

            if ! exec_log "trying to create test user again" \
                useradd -M "$user"; then

                exit 2
            fi
        fi
    } >> /dev/stdout 2>&1
}

ensure_user_test_missing() {
    # purge user from system
    userdel "$user" 2> /dev/null

    local test_home
    test_home="$base_home_dir"/"$user"

    # safety check, when /home is being used, certainly it was not our script
    # which made the change, so be safe and keep directory
    if [[ "$test_home" == /home/* ]]; then
        err "this is weird, seems like you are not using a temporary directory as home directory"
        err "for safety purposes, the deletion of the directory will be skipped: $test_home"
    else
        # remove user home
        exec_log "remove user test home dir" rm -rf "$test_home"
    fi
}

teardown() {
    # this is generally being mounted, so try to umount it
    umount "$rw_dir" 2> /dev/null || true

    # remove every registered directory
    for directory in "${temp_dirs[@]}"; do
        umount "$directory" 2> /dev/null || true
        rm -rf "$directory"
    done
}